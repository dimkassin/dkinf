name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
            fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - name: Build project
        run: npm run build

      - name: List tags
        run: git tag

      - name: Generate Changelog
        run: npx auto-changelog > CHANGELOG.md 2> /dev/null

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_SECRET }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: "Generating changelog..."
          draft: false
          prerelease: false

      - name: Update Release with Changelog
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.PAT_SECRET }}
          script: |
            const fs = require('fs');
            const changelog = fs.readFileSync('CHANGELOG.md', 'utf8');
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ steps.create_release.outputs.id }},
              body: `Changes in this Release\n---\n${changelog}`
            })

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.PAT_SECRET }}
          publish_dir: ./build

      - name: Update Release with deployment link
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.PAT_SECRET }}
          script: |
            const url = `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/`
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ steps.create_release.outputs.id }},
              body: `Changes in this Release\n---\n${changelog}\n\nDeployment: [${url}](${url})`
            })

      - name: Close issue
        id: close_issue
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.PAT_SECRET }}
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'RELEASE',
              sort: 'created',
              direction: 'desc'
            })
            const releaseIssue = issues.find(issue => issue.title.includes(`Release ${{ github.ref }}`))
            if (releaseIssue) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: releaseIssue.number,
                state: 'closed'
              })
            }